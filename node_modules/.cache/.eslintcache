[{"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\index.js":"1","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\App.js":"2","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\reportWebVitals.js":"3","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\isoCtrl\\isoCtrl.js":"4","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\home\\home.js":"5","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\welcome\\welcome.js":"6","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\register\\register.js":"7","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportBtns\\reportBtns.js":"8","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\datatable\\datatable.js":"9","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\stateTable\\stateTable.js":"10","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\commentBox\\commentBox.js":"11","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\actionExtra\\actionExtra.js":"12","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\actionBtns\\actionBtns.js":"13","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\selectPag\\selectPag.js":"14","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressTable\\progressTable.js":"15","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\checkInTable\\checkInTable.js":"16","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navBar\\navBar.js":"17","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\myTrayTable\\myTrayTable.js":"18","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\myTrayBtn\\myTrayBtn.js":"19","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\binTable\\binTable.js":"20","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navBtns\\navBtns.js":"21","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\statusDataTable\\statusDataTable.js":"22","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\menuList\\menuList.js":"23","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\binBtn\\binBtn.js":"24","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\cancelIso\\cancelIso.js":"25","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadPopUp\\uploadPopUp.js":"26","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\chooseFile\\chooseFile.js":"27","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\dragAndDrop\\dragAndDrop.js":"28","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\loginPage\\loginPage.js":"29","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\login\\login.js":"30","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\roleDropDown\\roleDropDown.js":"31","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\onHoldTable\\onHoldTable.js":"32","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\onHoldBtn\\onHoldBtn.js":"33","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\historyDataTable\\historyDataTable.js":"34","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\procInsBtn\\procInsBtn.js":"35","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\procInstTable\\procInstTable.js":"36","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadProcInst\\uploadProcInst.js":"37","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportsBtn\\reportsBtn.js":"38","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportBoxBtns\\reportBoxBtns.js":"39","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\forceClaimPopUp\\forceClaimPopUp.js":"40","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadReportPopUp\\uploadReportPopUp.js":"41","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\issuedBtn\\issuedBtn.js":"42"},{"size":756,"mtime":1620977886750,"results":"43","hashOfConfig":"44"},{"size":968,"mtime":1621415289614,"results":"45","hashOfConfig":"44"},{"size":375,"mtime":1620977886757,"results":"46","hashOfConfig":"44"},{"size":49984,"mtime":1621408053279,"results":"47","hashOfConfig":"44"},{"size":437,"mtime":1620977886757,"results":"48","hashOfConfig":"44"},{"size":921,"mtime":1621414530141,"results":"49","hashOfConfig":"44"},{"size":3627,"mtime":1621337132858,"results":"50","hashOfConfig":"44"},{"size":2058,"mtime":1620977886735,"results":"51","hashOfConfig":"44"},{"size":40811,"mtime":1621337132858,"results":"52","hashOfConfig":"44"},{"size":16453,"mtime":1621407976619,"results":"53","hashOfConfig":"44"},{"size":344,"mtime":1614590522413,"results":"54","hashOfConfig":"44"},{"size":5465,"mtime":1621322615295,"results":"55","hashOfConfig":"44"},{"size":11984,"mtime":1621408451621,"results":"56","hashOfConfig":"44"},{"size":1691,"mtime":1620977886735,"results":"57","hashOfConfig":"44"},{"size":4771,"mtime":1620977886735,"results":"58","hashOfConfig":"44"},{"size":5991,"mtime":1620977886703,"results":"59","hashOfConfig":"44"},{"size":7848,"mtime":1621415266543,"results":"60","hashOfConfig":"44"},{"size":31246,"mtime":1621337132858,"results":"61","hashOfConfig":"44"},{"size":1464,"mtime":1620977886719,"results":"62","hashOfConfig":"44"},{"size":10319,"mtime":1621337132859,"results":"63","hashOfConfig":"44"},{"size":8137,"mtime":1620977886719,"results":"64","hashOfConfig":"44"},{"size":15124,"mtime":1621337132858,"results":"65","hashOfConfig":"44"},{"size":8673,"mtime":1620977886719,"results":"66","hashOfConfig":"44"},{"size":1192,"mtime":1620977886703,"results":"67","hashOfConfig":"44"},{"size":2700,"mtime":1621235571970,"results":"68","hashOfConfig":"44"},{"size":2189,"mtime":1620977886735,"results":"69","hashOfConfig":"44"},{"size":1125,"mtime":1614590522410,"results":"70","hashOfConfig":"44"},{"size":9701,"mtime":1621408881034,"results":"71","hashOfConfig":"44"},{"size":501,"mtime":1620977886757,"results":"72","hashOfConfig":"44"},{"size":3111,"mtime":1621415252323,"results":"73","hashOfConfig":"44"},{"size":3017,"mtime":1620977886735,"results":"74","hashOfConfig":"44"},{"size":10301,"mtime":1621337132858,"results":"75","hashOfConfig":"44"},{"size":1191,"mtime":1620977886735,"results":"76","hashOfConfig":"44"},{"size":10916,"mtime":1621337132858,"results":"77","hashOfConfig":"44"},{"size":1846,"mtime":1620977886735,"results":"78","hashOfConfig":"44"},{"size":13723,"mtime":1621337132858,"results":"79","hashOfConfig":"44"},{"size":9671,"mtime":1621337132858,"results":"80","hashOfConfig":"44"},{"size":1208,"mtime":1620977886735,"results":"81","hashOfConfig":"44"},{"size":1452,"mtime":1620977886735,"results":"82","hashOfConfig":"44"},{"size":7069,"mtime":1621337132858,"results":"83","hashOfConfig":"44"},{"size":3135,"mtime":1621337132858,"results":"84","hashOfConfig":"44"},{"size":1195,"mtime":1620977886719,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"1eahr2m",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"88"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"88"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"113"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"116","messages":"117","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"146"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"151","messages":"152","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"173"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\index.js",[],["178","179"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\App.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\reportWebVitals.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\isoCtrl\\isoCtrl.js",["180","181","182","183","184","185","186"],"import DataTable from \"../../components/datatable/datatable\"\r\nimport ReportBtns from \"../../components/reportBtns/reportBtns\"\r\nimport StateTable from \"../../components/stateTable/stateTable\"\r\nimport NavBtns from \"../../components/navBtns/navBtns\"\r\nimport DragAndDrop from \"../../components/dragAndDrop/dragAndDrop\"\r\nimport \"./isoCtrl.css\"\r\nimport React, { useState , useEffect} from 'react'\r\nimport ActionButtons from \"../../components/actionBtns/actionBtns\"\r\nimport SelectPag from \"../../components/selectPag/selectPag\"\r\nimport CheckInTable from \"../../components/checkInTable/checkInTable\"\r\nimport NavBar from '../../components/navBar/navBar'\r\nimport MyTrayBtn from \"../../components/myTrayBtn/myTrayBtn\"\r\nimport MyTrayTable from \"../../components/myTrayTable/myTrayTable\"\r\nimport BinBtn from '../../components/binBtn/binBtn'\r\nimport BinTable from \"../../components/binTable/binTable\"\r\nimport OnHoldTable from \"../../components/onHoldTable/onHoldTable\"\r\nimport StatusDataTable from \"../../components/statusDataTable/statusDataTable\"\r\nimport HistoryDataTable from \"../../components/historyDataTable/historyDataTable\"\r\nimport RoleDropDown from \"../../components/roleDropDown/roleDropDown\"\r\n\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Collapse from '@material-ui/core/Collapse'\r\nimport OnHoldBtn from \"../../components/onHoldBtn/onHoldBtn\"\r\nimport ProcInsBtn from \"../../components/procInsBtn/procInsBtn\"\r\nimport ReportsBtn from \"../../components/reportsBtn/reportsBtn\"\r\nimport ProcInstTable from \"../../components/procInstTable/procInstTable\"\r\nimport JSZip from 'jszip'\r\nimport { saveAs } from 'file-saver';\r\nimport * as FileSaver from \"file-saver\";\r\nimport * as XLSX from \"xlsx\";\r\nimport ReportBoxBtns from \"../../components/reportBoxBtns/reportBoxBtns\"\r\nimport IssuedBtn from \"../../components/issuedBtn/issuedBtn\"\r\n\r\n\r\nconst IsoCtrl = () => {\r\n   \r\n    document.body.style.zoom = 0.9\r\n    const[pagination, setPagination] = useState(8) //Controla el numero de entradas por pagina de la tabla\r\n    const [currentRole, setCurrentRole] = useState();\r\n    const [roles, setRoles] = useState();\r\n    const [selected, setSelected] = useState([]);\r\n    const [updateData, setUpdateData] = useState();\r\n    const [comment, setComment] = useState(\" \");\r\n    const [commentAlert, setCommentAlert] = useState(false);\r\n    const [downloadZip, setDownloadzip] = useState(new JSZip());\r\n    const [loading, setLoading] = useState(false);\r\n    const [errorUnclaim, setErrorUnclaim] = useState(false);\r\n    const [errorPI, setErrorPI] = useState(false);\r\n    const [errorCL, setErrorCL] = useState(false);\r\n    const [transactionSuccess, setTransactionSuccess] = useState(false);\r\n    const [errorReports, setErrorReports] = useState(false);\r\n    const [progress, setProgress] = useState(0);\r\n    const [realProgress, setRealProgress] = useState(0);\r\n    const [progressISO, setProgressISO] = useState(0);\r\n    const [realProgressISO, setRealProgressISO] = useState(0);\r\n    const [errorUnclaimR, setErrorUnclaimR] = useState(false);\r\n\r\n    const CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n    \r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\n    const [currentTab, setCurrentTab] = useState(secureStorage.getItem(\"tab\")) //Controla la tabla y botones que se muestran\r\n    //La altura de la tabla es fija en funcion de la paginacion para evitar que los botones se muevan\r\n    var dataTableHeight = 8\r\n\r\n    if (pagination === 8){\r\n        dataTableHeight = \"520px\"\r\n    }if(pagination === 25){\r\n        dataTableHeight = \"1220px\"\r\n    }if(pagination === 50){\r\n        dataTableHeight = \"2230px\"\r\n    }if(pagination === 100){\r\n        dataTableHeight = \"4300px\"\r\n    }\r\n\r\n    //Componentes de la pagina que varian en funcion del estado\r\n    var uploadButton, actionButtons, actionText, commentBox, tableContent, procInsBtn, issuedBtn\r\n    var currentTabText = currentTab\r\n    if(currentTabText === \"LDE/IsoControl\"){\r\n        currentTabText = \"LOS/IsoControl\"\r\n    }\r\n    tableContent = <DataTable forceUnclaim = {forceUnclaim.bind(this)} onChange={value=> setSelected(value)} selected = {selected} pagination = {pagination} currentTab = {currentTab} currentRole={currentRole} updateData = {updateData}/>\r\n    var pageSelector = <SelectPag onChange={value => setPagination(value)} pagination = {pagination}/>\r\n    var currentUser = secureStorage.getItem('user')\r\n\r\n    const body = {\r\n        user: currentUser,\r\n    }\r\n    \r\n    useEffect(()=>{\r\n        setUpdateData(!updateData)\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/roles/user\", options)\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setRoles(json.roles);\r\n                if(secureStorage.getItem('role') !== null){\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }else{\r\n                    secureStorage.setItem('role', json.roles[0])\r\n                    setCurrentRole(secureStorage.getItem('role'))\r\n                }\r\n                }\r\n            )\r\n            .catch(error => {\r\n                console.log(error);\r\n            })       \r\n            setErrorPI(false)\r\n            setErrorUnclaimR(false)\r\n            setErrorCL(false)\r\n            setUpdateData(!updateData)\r\n            setTransactionSuccess(false);\r\n            setErrorUnclaim(false)\r\n            setErrorReports(false)\r\n            setLoading(false)\r\n    },[currentRole]);\r\n\r\n    useEffect(()=>{\r\n        setErrorUnclaimR(false)\r\n        setErrorPI(false);\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false)\r\n        setErrorUnclaim(false)\r\n        setLoading(false)\r\n        setErrorReports(false)\r\n    }, [currentTab])\r\n\r\n    const getProgress = () =>{\r\n        setUpdateData(!updateData)\r\n\r\n    }\r\n\r\n    const claim = async(event) => {\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        console.log(selected)\r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            if(currentTab === \"Process\"){\r\n                for (let i = 0; i < selected.length; i++){\r\n                \r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/claimProc\", options)\r\n                }\r\n            }else if(currentTab === \"Instrument\"){\r\n                for (let i = 0; i < selected.length; i++){\r\n                \r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/claimInst\", options)\r\n                }\r\n            }else{\r\n                for (let i = 0; i < selected.length; i++){\r\n                \r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/claim\", options)\r\n                }\r\n            \r\n            }\r\n            setUpdateData(!updateData)\r\n            setLoading(false)\r\n            \r\n        }\r\n     \r\n    }   \r\n    \r\n    const forceClaim = async(username) =>{\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                \r\n                const body ={\r\n                    user : username,\r\n                    file: selected[i],\r\n                    los: currentUser\r\n                }\r\n                console.log(body)\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/forceClaim\", options)\r\n            }\r\n            setUpdateData(!updateData)\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    const unclaim = async (event) =>{\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            if (currentRole === \"Process\"){\r\n                for (let i = 0; i < selected.length; i++){\r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/unclaimProc\", options)\r\n                }\r\n            }else if(currentRole === \"Instrument\"){\r\n                for (let i = 0; i < selected.length; i++){\r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    console.log(body)\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/unclaimInst\", options)\r\n                }\r\n            }else{\r\n                for (let i = 0; i < selected.length; i++){\r\n                    const body ={\r\n                        user : currentUser,\r\n                        file: selected[i],\r\n                        role: currentRole\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/unclaim\", options)\r\n                    .then(response => response.json())\r\n                    .then(json=>{\r\n                        if(json.error === \"forced\"){\r\n                            setErrorUnclaim(true)\r\n                        }else if(json.error === \"returned\"){\r\n                            setErrorUnclaimR(true)\r\n                        }\r\n                    })\r\n                    .catch(err => {\r\n                    });\r\n                }\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n        }\r\n        \r\n    }\r\n\r\n    async function forceUnclaim(fileName){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setLoading(true)\r\n        localStorage.setItem(\"update\", true)\r\n        const body ={\r\n            user : currentUser,\r\n            file: fileName,\r\n            role: currentRole\r\n        }\r\n        console.log(body)\r\n        const options = {\r\n            method: \"POST\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify(body)\r\n        }\r\n        console.log(body)\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/forceUnclaim\", options)\r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n    }\r\n\r\n\r\n    const verifyClick = async(event) =>{\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setLoading(true)\r\n        console.log(\"Envio a verify\")\r\n        if(selected.length > 0){\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                \r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    role: currentRole\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/verify\", options)\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n        }    \r\n    }\r\n\r\n    async function cancelVerifyClick(filename){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setTransactionSuccess(false);\r\n        setLoading(true)\r\n        localStorage.setItem(\"update\", true)\r\n            \r\n            const body ={\r\n                user : currentUser,\r\n                file: filename,\r\n                role: currentRole\r\n            }\r\n            const options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/cancelVerify\", options)\r\n        \r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n            \r\n    }\r\n\r\n    async function transaction(destiny){\r\n        \r\n        if(selected.length > 0){\r\n            setErrorUnclaimR(false)\r\n            setErrorReports(false)\r\n            setErrorCL(false)\r\n            setErrorUnclaim(false)\r\n            setErrorPI(false);\r\n            setTransactionSuccess(false);\r\n            setLoading(true)\r\n            if(destiny === \"Design\"){\r\n                if(comment.length > 1){\r\n                    setComment(\" \")\r\n                    setCommentAlert(false)\r\n                    localStorage.setItem(\"update\", true)\r\n                    for (let i = 0; i < selected.length; i++){\r\n                        const body ={\r\n                            user : currentUser,\r\n                            fileName: selected[i],\r\n                            to: destiny,\r\n                            role: secureStorage.getItem(\"role\"),\r\n                            comment: comment,\r\n                            deleted: 0,\r\n                            onhold: 0\r\n                        }\r\n                        const options = {\r\n                            method: \"POST\",\r\n                            headers: {\r\n                                \"Content-Type\": \"application/json\"\r\n                            },\r\n                            body: JSON.stringify(body)\r\n                        }\r\n                        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/transaction\", options)\r\n                        setTransactionSuccess(true)\r\n                    }\r\n                }else{\r\n                    console.log(\"vacio\")\r\n                    setCommentAlert(true)\r\n                }\r\n            }else if (destiny === \"LDE/Isocontrol\"){\r\n                for (let i = 0; i < selected.length; i++){\r\n                    const options = {\r\n                        method: \"GET\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/piStatus/\"+selected[i], options)\r\n                    .then(response => response.json())\r\n                    .then(async json =>{\r\n                        if(json.sit === 1 || json.sit === 4 || json.spo === 1 || json.spo === 4){\r\n                            localStorage.setItem(\"update\", true)\r\n                            setErrorPI(true);\r\n                            setTransactionSuccess(false);\r\n                        }else{\r\n                            setCommentAlert(false)\r\n                            localStorage.setItem(\"update\", true)\r\n                            let deleted, hold = 0\r\n                    \r\n                            const body ={\r\n                                user : currentUser,\r\n                                fileName: selected[i],\r\n                                to: destiny,\r\n                                role: secureStorage.getItem(\"role\"),\r\n                                comment: null,\r\n                                deleted: deleted,\r\n                                onhold: hold\r\n                            }\r\n                            const options = {\r\n                                method: \"POST\",\r\n                                headers: {\r\n                                    \"Content-Type\": \"application/json\"\r\n                                },\r\n                                body: JSON.stringify(body)\r\n                            }\r\n                            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/transaction\", options)\r\n                            .then(response => response.json())\r\n                            .then(json=>{\r\n                                console.log(json)\r\n                            })\r\n                            .catch(async error =>{\r\n                                \r\n                                await setErrorCL(true) \r\n                                console.log(errorCL)                            \r\n                            })\r\n                            if(!errorCL){\r\n                                setTransactionSuccess(true)\r\n                            }\r\n                            \r\n                        }\r\n                    })\r\n                }\r\n                await setUpdateData(!updateData)\r\n                setLoading(false)\r\n            }else{\r\n                setCommentAlert(false)\r\n                localStorage.setItem(\"update\", true)\r\n                let deleted, hold = 0\r\n\r\n                if(destiny === \"Recycle bin\"){\r\n                    deleted = 1\r\n                }\r\n\r\n                if(destiny === \"On hold\"){\r\n                    hold = 1\r\n                }\r\n                for (let i = 0; i < selected.length; i++){\r\n                    \r\n                    const body ={\r\n                        user : currentUser,\r\n                        fileName: selected[i],\r\n                        to: destiny,\r\n                        role: secureStorage.getItem(\"role\"),\r\n                        comment: null,\r\n                        deleted: deleted,\r\n                        onhold: hold\r\n                    }\r\n                    const options = {\r\n                        method: \"POST\",\r\n                        headers: {\r\n                            \"Content-Type\": \"application/json\"\r\n                        },\r\n                        body: JSON.stringify(body)\r\n                    }\r\n                    await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/transaction\", options)\r\n                    setTransactionSuccess(true)\r\n                }\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            await getProgress()\r\n        }    \r\n    }\r\n\r\n    async function returnLead(destiny){\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        setErrorUnclaimR(false)\r\n        setLoading(true)\r\n        localStorage.setItem(\"update\", true)\r\n        for (let i = 0; i < selected.length; i++){\r\n                    \r\n            const body ={\r\n                user : currentUser,\r\n                fileName: selected[i],\r\n                to: destiny,\r\n            }\r\n            const options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/api/returnLead\", options)\r\n            setTransactionSuccess(true)\r\n        }\r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n        await getProgress()\r\n    }\r\n    \r\n\r\n    function handleComment(event){\r\n        setComment(event.target.value)\r\n    }\r\n\r\n    async function restore(){\r\n        setErrorReports(false)\r\n        setErrorUnclaimR(false)\r\n        setErrorUnclaim(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setErrorPI(false)\r\n        console.log(selected.length)\r\n        if(selected.length > 0){\r\n            setLoading(true)\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                const body ={\r\n                    fileName: selected[i],\r\n                    user: currentUser,\r\n                    deleted: 0,\r\n                    onhold: 0\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/restore\", options)\r\n                setTransactionSuccess(true)\r\n            }\r\n            await setUpdateData(!updateData)\r\n            console.log(\"restored\")\r\n            setLoading(false)\r\n            await getProgress()\r\n        }\r\n    }\r\n\r\n    function procOrInst(tab) {\r\n        if(tab === \"Process\" || tab === \"Instrument\"){\r\n            setCurrentTab(tab)\r\n        }else if (currentRole === \"Process\"){\r\n            setCurrentTab(\"Process\")\r\n        }else{\r\n            setCurrentTab(\"Instrument\")\r\n        }\r\n    }\r\n\r\n    async function sendProcessClick(fileName){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setLoading(true)\r\n        localStorage.setItem(\"update\", true)\r\n            \r\n            const body ={\r\n                user : currentUser,\r\n                file: fileName,\r\n                role: currentRole\r\n            }\r\n            const options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/process\", options)\r\n        \r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n    }\r\n\r\n    async function sendInstrumentClick(fileName){\r\n        setErrorReports(false)\r\n        setErrorUnclaim(false)\r\n        setErrorUnclaimR(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setLoading(true)\r\n        localStorage.setItem(\"update\", true)\r\n            \r\n            const body ={\r\n                user : currentUser,\r\n                file: fileName,\r\n                role: currentRole\r\n            }\r\n            const options = {\r\n                method: \"POST\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\"\r\n                },\r\n                body: JSON.stringify(body)\r\n            }\r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/instrument\", options)\r\n        \r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n    }\r\n\r\n    function updateD(){\r\n        setUpdateData(!updateData)\r\n    }\r\n\r\n    async function downloadFiles(){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setErrorCL(false)\r\n        setTransactionSuccess(false);\r\n        setErrorUnclaim(false)\r\n        setLoading(true)\r\n        localStorage.setItem(\"update\", true)\r\n        /*\r\n        if(selected.length === 1){\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                const options = {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/pdf\"\r\n                    }\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/download/\"+selected[i], options)\r\n                .then(res => res.blob())\r\n                    .then(response =>{\r\n                        console.log(\"Se descarga\")\r\n                        download(new Blob([response]), selected[i], \"application/pdf\")\r\n                    })\r\n            }\r\n        }else if (selected.length > 1){\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n\r\n                const options = {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/pdf\"\r\n                    }\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/download/\"+selected[i], options)\r\n                .then(res => res.blob())\r\n                    .then(response =>{\r\n                        setDownloadzip(downloadZip.file(selected[i], new Blob([response]),{binary:true}))   \r\n                    })\r\n            }\r\n            const zipname = String(Date().toLocaleString().replace(/\\s/g, '-').split('-G').slice(0, -1))\r\n            downloadZip.generateAsync({type:\"blob\"}).then(function (blob) { // 1) generate the zip file\r\n                saveAs(blob,  zipname)\r\n            })\r\n            \r\n        }\r\n        await setUpdateData(!updateData)\r\n        await setDownloadzip(new JSZip())   \r\n        setLoading(false)\r\n        */\r\n        for (let i = 0; i < selected.length; i++){\r\n\r\n            const options = {\r\n                method: \"GET\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/pdf\"\r\n                }\r\n            }\r\n            \r\n            await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/getAttach/\"+selected[i], options)\r\n            .then(response => response.json())\r\n            .then(async json => {\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/download/\"+selected[i], options)\r\n                .then(res => res.blob())\r\n                .then( async response =>{\r\n                    setDownloadzip(downloadZip.file(selected[i], new Blob([response]),{binary:true}))   \r\n                    for(let i = 0; i < json.length; i++){\r\n                        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/download/\"+json[i], options)\r\n                        .then(res => res.blob())\r\n                        .then(response =>{\r\n                            setDownloadzip(downloadZip.file(json[i], new Blob([response]),{binary:true}))   \r\n                        })\r\n                    }\r\n                     \r\n                })\r\n            })\r\n        \r\n\r\n            \r\n    \r\n        }\r\n        const zipname = String(Date().toLocaleString().replace(/\\s/g, '-').split('-G').slice(0, -1))\r\n        downloadZip.generateAsync({type:\"blob\"}).then(function (blob) { // 1) generate the zip file\r\n            saveAs(blob,  zipname)\r\n        })  \r\n        \r\n        await setDownloadzip(new JSZip())   \r\n        //await setAttachFiles(null)\r\n        await setUpdateData(!updateData)\r\n        setLoading(false)\r\n        \r\n    }\r\n\r\n    async function downloadHistory(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadHistory/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"ISO_ID\", \"FROM\", \"TO\", \"DATE\", \"COMMENT\", \"USER\"]\r\n            exportToExcel(JSON.parse(json), \"Comments\", headers)\r\n        })\r\n    }\r\n\r\n    async function downloadStatus(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadStatus/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"ISO_ID\", \"START_DATE\", \"CURRENT_DATE\", \"CONDITION\"]\r\n            exportToExcel(JSON.parse(json), \"Status\", headers)\r\n        })\r\n    }\r\n\r\n    async function downloadPI(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadPI/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"ISO_ID\", \"PROCESS\", \"INSTRUMENTATION\", \"UPDATED_AT\"]\r\n            exportToExcel(JSON.parse(json), \"IsoStatusSIT-SPO\", headers)\r\n        })\r\n    }\r\n\r\n    async function downloadIssued(){\r\n        setErrorReports(false)\r\n\r\n        await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/downloadIssued/\")\r\n        .then(response => response.json())\r\n        .then(json => {\r\n            const headers = [\"ISO_ID\", \"REV0\", \"REV1\", \"REV2\", \"REV3\", \"REV4\"]\r\n            exportToExcel(JSON.parse(json), \"IsoStatusIssued\", headers)\r\n        })\r\n    }\r\n\r\n    const exportToExcel = (apiData, fileName, headers) => {\r\n        setErrorReports(false)\r\n        const fileType =\r\n          \"application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;charset=UTF-8\";\r\n        const header_cells = ['A1', 'B1', 'C1', 'D1', 'E1', 'F1', 'G1', 'H1', 'I1', 'J1', 'K1', 'L1', 'M1', 'O1']\r\n        const fileExtension = \".xlsx\";\r\n\r\n        let wscols = []\r\n        for(let i = 0; i < headers.length; i++){\r\n            wscols.push({width:35})\r\n        }\r\n\r\n        const ws = XLSX.utils.json_to_sheet(apiData);   \r\n        ws[\"!cols\"] = wscols\r\n        for(let i = 0; i < headers.length; i++){\r\n            ws[header_cells[i]].v = headers[i]\r\n        }\r\n        const wb = { Sheets: { data: ws }, SheetNames: [\"data\"] };\r\n        const excelBuffer = XLSX.write(wb, { bookType: \"xlsx\", type: \"array\" });\r\n        const data = new Blob([excelBuffer], { type: fileType });\r\n        FileSaver.saveAs(data, fileName + fileExtension);\r\n\r\n    }\r\n\r\n    async function setUploading(active){\r\n        setErrorReports(false)\r\n        setLoading(active)\r\n        if(!active){\r\n            setTransactionSuccess(true)\r\n        }\r\n    }\r\n\r\n    async function setErrorReport(){\r\n        setErrorReports(true)\r\n    }\r\n\r\n    async function issue(transmittal, date){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setLoading(true)\r\n\r\n        console.log(transmittal)\r\n        \r\n        if (selected.length > 0){\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    role: currentRole,\r\n                    transmittal: transmittal,\r\n                    date: date\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/toIssue\", options)\r\n            }\r\n            await setUpdateData(!updateData)\r\n            setLoading(false)\r\n            await getProgress()\r\n        }\r\n    }\r\n\r\n    async function newRev() {\r\n        setErrorReports(false)\r\n        setErrorUnclaimR(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setLoading(true)\r\n        if (selected.length > 0){\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    role: currentRole,\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/newRev\", options)\r\n            }\r\n            setUpdateData(!updateData)\r\n            setLoading(false)\r\n            await getProgress()\r\n        }\r\n    }\r\n\r\n    async function request() {\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setLoading(true)\r\n        if (selected.length > 0){\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    role: currentRole,\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/request\", options)\r\n                \r\n            }\r\n            setUpdateData(!updateData)\r\n            setLoading(false)\r\n            \r\n        }\r\n\r\n    }\r\n\r\n    async function returnIso(destiny, comments){\r\n        setErrorUnclaimR(false)\r\n        setErrorReports(false)\r\n        setTransactionSuccess(false);\r\n        setErrorCL(false)\r\n        setErrorUnclaim(false)\r\n        setLoading(true)\r\n        if (selected.length > 0){\r\n            localStorage.setItem(\"update\", true)\r\n            for (let i = 0; i < selected.length; i++){\r\n                const body ={\r\n                    user : currentUser,\r\n                    file: selected[i],\r\n                    role: currentRole,\r\n                    from: currentTab,\r\n                    destiny: destiny,\r\n                    comments: comments\r\n                }\r\n                const options = {\r\n                    method: \"POST\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\"\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                }\r\n                await fetch(\"http://\"+process.env.REACT_APP_SERVER+\":\"+process.env.REACT_APP_NODE_PORT+\"/returnIso\", options)\r\n                \r\n            }\r\n            setUpdateData(!updateData)\r\n            setLoading(false)\r\n        }\r\n    }\r\n\r\n    if(currentTab === \"Upload IsoFiles\"){\r\n        secureStorage.setItem(\"tab\", \"Upload IsoFiles\")\r\n        uploadButton = <button  type=\"button\" class=\"btn btn-info btn-lg\" style={{backgroundColor: \"#17a2b8\", width:\"180px\"}}><b>Upload</b></button>\r\n        tableContent = <DragAndDrop mode={\"upload\"} user={currentUser} uploaded={getProgress.bind(this)}/>\r\n        pageSelector = null\r\n    }if(currentTab === \"Design\" && currentRole === \"Design\"){\r\n        uploadButton = <button  type=\"button\" className=\"btn btn-info btn-lg\" style={{backgroundColor: \"lightblue\", width:\"180px\"}} onClick={() => setCurrentTab(\"Upload IsoFiles\")}><b>Upload</b></button>\r\n    }if(currentTab === \"CheckBy\"){\r\n        tableContent = <CheckInTable/>\r\n    }if(currentTab === \"My Tray\"){\r\n        tableContent = <MyTrayTable  onChange={value=> setSelected(value)} cancelVerifyClick={cancelVerifyClick.bind(this)} sendProcessClick={sendProcessClick.bind(this)} sendInstrumentClick = {sendInstrumentClick.bind(this)} updateD = {updateD.bind(this)} pagination = {pagination} currentRole = {currentRole} currentUser = {currentUser} selected={selected} updateData = {updateData}/>\r\n    }if(currentTab === \"Recycle bin\"){\r\n        tableContent = <BinTable onChange={value=> setSelected(value)} selected = {selected} pagination = {pagination} currentTab = {currentTab} updateData = {updateData}/>\r\n    }if(currentTab === \"On hold\"){\r\n        tableContent = <OnHoldTable onChange={value=> setSelected(value)} selected = {selected} pagination = {pagination} currentTab = {currentTab} updateData = {updateData}/>\r\n    }if(currentTab === \"Status\"){\r\n        tableContent = <StatusDataTable pagination = {pagination} role = {currentRole}/>\r\n    }if(currentTab === \"History\"){\r\n        tableContent = <HistoryDataTable pagination = {pagination}/>   \r\n    }if(currentRole === \"Process\" || currentRole === \"Instrument\" || currentRole === \"SpecialityLead\"){\r\n        procInsBtn = <ProcInsBtn onChange={value => procOrInst(value)} currentTab = {currentTab} />\r\n    }if(currentTab === \"Process\" || currentTab === \"Instrument\"){\r\n        tableContent = <ProcInstTable onChange={value=> setSelected(value)} selected = {selected} pagination = {pagination} currentTab = {currentTab} updateData = {updateData} />\r\n    }if(currentTab === \"Reports\"){\r\n        tableContent = <ReportBoxBtns downloadHistory={downloadHistory.bind(this)} downloadStatus={downloadStatus.bind(this)} downloadPI={downloadPI.bind(this)} downloadIssued={downloadIssued.bind(this)} setErrorReport={setErrorReport.bind(this)} setUploading={setUploading.bind(this)}/>\r\n    }\r\n\r\n    if(currentTab === \"My Tray\" || currentTab === \"LDE/IsoControl\"){\r\n        commentBox = <div>\r\n            <textarea placeholder=\"Comments\" class=\"comments\" cols=\"100\" rows=\"2\" required=\"\" maxlength=\"400\" name=\"comments\" value={comment} onChange={handleComment}></textarea>\r\n        </div>\r\n    }\r\n\r\n    if(((currentRole === \"Design\" || currentRole === \"DesignLead\") && currentTab === \"Design\") || \r\n    ((currentRole === \"Stress\" || currentRole === \"StressLead\") && currentTab === \"Stress\") ||\r\n    ((currentRole === \"Supports\" || currentRole === \"SupportsLead\") && currentTab === \"Supports\") ||\r\n    ((currentRole === \"Materials\") && currentTab === \"Materials\") ||\r\n    ((currentRole === \"Issuer\") && currentTab === \"Issuer\") ||\r\n    ((currentRole === \"SpecialityLead\" || currentTab ===\"SpecialityLead\") ||\r\n    (currentTab=== \"My Tray\")) || (((currentTab === \"Recycle bin\" || currentTab === \"On hold\") && currentRole === \"DesignLead\") || \r\n    currentRole === \"SpecialityLead\") || (currentTab === \"Process\" && currentRole === \"Process\") ||\r\n    (currentRole === \"Instrument\" && currentTab === \"Instrument\") ||\r\n    (currentRole === \"Design\" || currentRole === \"DesignLead\") && currentTab === \"Issued\"){\r\n        actionText = <b className=\"progress__text\">Click an action for selected IsoFiles:</b>\r\n        actionButtons = <ActionButtons claimClick={claim.bind(this)} verifyClick={verifyClick.bind(this)} unclaimClick={unclaim.bind(this)} transaction={transaction.bind(this)} restoreClick={restore.bind(this)} returnLead={returnLead.bind(this)} downloadFiles={downloadFiles.bind(this)} forceClaim={forceClaim.bind(this)} issue={issue.bind(this)} newRev={newRev.bind(this)} request={request.bind(this)} returnIso={returnIso.bind(this)} onlyDownload = {false} currentTab = {currentTab} user={currentUser} role = {currentRole}/>\r\n    }else if(currentTab !== \"History\" && currentTab !== \"Upload IsoFiles\" && currentTab !== \"Recycle bin\" && currentTab !== \"Reports\"){\r\n        actionText = <b className=\"progress__text\">Click an action for selected IsoFiles:</b>\r\n        actionButtons = <ActionButtons claimClick={claim.bind(this)} verifyClick={verifyClick.bind(this)} unclaimClick={unclaim.bind(this)} transaction={transaction.bind(this)} restoreClick={restore.bind(this)} returnLead={returnLead.bind(this)} downloadFiles={downloadFiles.bind(this)} forceClaim={forceClaim.bind(this)} issue={issue.bind(this)} newRev={newRev.bind(this)} request={request.bind(this)} returnIso={returnIso.bind(this)} onlyDownload = {true} currentTab = {currentTab} user={currentUser} role = {currentRole}/>\r\n    }\r\n    if(currentTab === \"LDE/IsoControl\" || currentTab === \"Issued\"){\r\n        issuedBtn = <IssuedBtn onChange={value => setCurrentTab(\"Issued\")} currentTab = {currentTab}/>\r\n    }\r\n    \r\n    \r\n    return (\r\n        \r\n        <body>\r\n            \r\n            <NavBar onChange={value => setCurrentTab(value)}/>\r\n\r\n            <div className=\"isoCtrl__container\">     \r\n                <center>\r\n                    <Collapse in={loading}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\",zIndex:\"3\"}} severity=\"info\"\r\n                            >\r\n                            Processing...\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={errorPI}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"error\"\r\n                            >\r\n                            At least one isometric was on revision and wasn't sent to LDE/Isocontrol\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={transactionSuccess}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"success\"\r\n                            >\r\n                            Successful!\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={errorUnclaim}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"error\"\r\n                            >\r\n                            Can't unclaim an iso assigned by LOS!\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={errorUnclaimR}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"error\"\r\n                            >\r\n                            Can't unclaim a returned ISO!\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={errorReports}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"error\"\r\n                            >\r\n                            Missing columns!\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <Collapse in={errorCL}>\r\n                        <Alert style={{fontSize:\"22px\",position: \"fixed\", left: \"50%\", top:\"10%\", transform: \"translate(-50%, -50%)\", zIndex:\"3\"}} severity=\"error\"\r\n                            >\r\n                            Missing clean!\r\n                        </Alert>\r\n                    </Collapse>\r\n                    <h2 className=\"title__container\">\r\n                        <div className=\"roleSelector__container\">\r\n                            <RoleDropDown style={{paddingLeft: \"2px\"}} onChange={value => setCurrentRole(value)} roles = {roles}/>\r\n                         </div>\r\n                        <b >      \r\n                            <i className=\"iso__title\">IsoTracker</i>\r\n                        </b>\r\n                    </h2>\r\n                    <h3 className=\"iso__subtitle\">{currentTabText}</h3>\r\n                </center>\r\n                \r\n                <div>\r\n                    <div>\r\n                        <div style={{display:\"inline\"}}>\r\n                        <MyTrayBtn onChange={value => setCurrentTab(value)} currentTab = {currentTab}/>\r\n                            <td className=\"reportBtns__container\" style={{width:\"380px\"}}>\r\n                                \r\n                                <ReportBtns onChange={value => setCurrentTab(value)} currentTab = {currentTab}/>\r\n                                \r\n                            </td>\r\n                            <td>\r\n                                {uploadButton}\r\n                            </td>   \r\n                            <div className=\"stateTable__container\">\r\n                                <td style={{width: \"75 %\"}}>\r\n                                    <StateTable updateData={updateData} currentRole = {currentRole} progress={progress} realProgress={realProgress} progressISO={progressISO} realProgressISO={realProgressISO}/>\r\n                                </td>\r\n                            </div>            \r\n\r\n                        </div>\r\n                    </div>\r\n                </div>              \r\n                \r\n                \r\n                <div style={{position: \"relative\", width:\"500px\"}}>\r\n                  {pageSelector}\r\n                  <BinBtn onChange={value => setCurrentTab(\"Recycle bin\")} currentTab = {currentTab}/>\r\n                  <OnHoldBtn onChange={value => setCurrentTab(\"On hold\")} currentTab = {currentTab}/>\r\n                  <ReportsBtn onChange={value => setCurrentTab(\"Reports\")} currentTab = {currentTab}/>\r\n                  {procInsBtn}\r\n                  {issuedBtn}\r\n\r\n                </div>\r\n                    \r\n                \r\n                <div style={{height: dataTableHeight}}>\r\n                    <br></br>\r\n                    <br></br> \r\n                    {tableContent}\r\n                </div>\r\n                <div className=\"bottom__container\">\r\n                    <Collapse in={commentAlert}>\r\n                        <Alert severity=\"error\"\r\n                            >\r\n                            Add a comment before sending the isos back to design!\r\n\r\n                            </Alert>\r\n                    </Collapse>\r\n                    <center className=\"actionBtns__container\">\r\n                        {actionText}\r\n                        {actionButtons}\r\n                    </center>\r\n                    <br></br>\r\n                    <center className=\"commentBox__container\">\r\n                        {commentBox}\r\n                    </center>\r\n                 \r\n                    \r\n                </div>\r\n            </div>\r\n            <center className=\"navBtns__center\">              \r\n                <NavBtns onChange={value => setCurrentTab(value)} currentTab = {currentTab} currentRole = {currentRole}/>               \r\n            </center>\r\n            <br></br>\r\n        </body>\r\n\r\n        \r\n    );\r\n};\r\n\r\nexport default IsoCtrl;\r\n","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\home\\home.js",[],["187","188"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\welcome\\welcome.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\register\\register.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportBtns\\reportBtns.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\datatable\\datatable.js",["189","190"],"import React from 'react';\r\nimport 'antd/dist/antd.css';\r\nimport { Table, Input, Button, Space } from 'antd';\r\nimport Highlighter from 'react-highlight-words';\r\nimport { SearchOutlined } from '@ant-design/icons';\r\nimport './datatable.css'\r\nimport { Link } from 'react-router-dom';\r\n\r\n\r\nconst CryptoJS = require(\"crypto-js\");\r\n    const SecureStorage = require(\"secure-web-storage\");\r\n    var SECRET_KEY = 'sanud2ha8shd72h';\r\n    \r\n    var secureStorage = new SecureStorage(localStorage, {\r\n        hash: function hash(key) {\r\n            key = CryptoJS.SHA256(key, SECRET_KEY);\r\n    \r\n            return key.toString();\r\n        },\r\n        encrypt: function encrypt(data) {\r\n            data = CryptoJS.AES.encrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString();\r\n    \r\n            return data;\r\n        },\r\n        decrypt: function decrypt(data) {\r\n            data = CryptoJS.AES.decrypt(data, SECRET_KEY);\r\n    \r\n            data = data.toString(CryptoJS.enc.Utf8);\r\n    \r\n            return data;\r\n        }\r\n    });\r\n\r\nclass DataTable extends React.Component{\r\n  state = {\r\n    searchText: '',\r\n    searchedColumn: '',\r\n    data: [],\r\n    tab: this.props.currentTab,\r\n    role: this.props.currentRole,\r\n    selectedRows: [],\r\n    selectedRowsKeys: [],\r\n    updateData: this.props.updateData,\r\n    username: \"\",\r\n    acronyms : null\r\n  };\r\n\r\n  \r\n\r\n  componentDidMount(){\r\n\r\n    \r\n    fetch(\"http://localhost:5000/api/roles/acronyms\")\r\n      .then(response => response.json())\r\n      .then(json => {\r\n        let dict = {}\r\n\r\n        for(let i = 0; i < json.length; i++){\r\n          dict[json[i].name] = json[i].code\r\n        }\r\n        this.setState({\r\n          acronyms: dict\r\n        })\r\n      })\r\n\r\n      let body \r\n      if(this.props.currentTab === \"Issued\"){\r\n        body ={\r\n          currentTab : \"LDE/IsoControl\"\r\n        }\r\n      }else{\r\n        body ={\r\n          currentTab : this.props.currentTab\r\n        }\r\n      }\r\n      const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n      fetch(\"http://localhost:5000/files\", options)\r\n          .then(response => response.json())\r\n          .then(json => {\r\n                  var rows = []\r\n                  let row = null\r\n                  let pButton, iButton, rButton = null\r\n                  \r\n                  for(let i = 0; i < json.rows.length; i++){\r\n                    switch(json.rows[i].spo){\r\n                      case 0:\r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      case 1:\r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"yellow\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      case 2:\r\n                        pButton = <button className=\"btn btn-success\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break; \r\n                      case 3:\r\n                        pButton = <button className=\"btn btn-danger\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      case 4:\r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"orange\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      default:  \r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>      \r\n                    }\r\n                    switch(json.rows[i].sit){\r\n                      case 0:\r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      case 1:\r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"yellow\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      case 2:\r\n                        iButton = <button className=\"btn btn-success\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break; \r\n                      case 3:\r\n                        iButton = <button className=\"btn btn-danger\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      case 4:\r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"orange\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      default:  \r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>      \r\n                    }\r\n                    \r\n                    let revision = \"\"\r\n                    if(this.props.currentTab === \"Issued\"){\r\n                      console.log(json.rows[i].transmittal)\r\n                      revision = \"R\" + String(json.rows[i].revision - 1) + \" - \" + json.rows[i].transmittal + \"/\" + json.rows[i].issued_date\r\n                    }else{\r\n                      revision = \"*R\" + json.rows[i].revision\r\n                    }\r\n\r\n                    if(json.rows[i].requested === 1){\r\n                      rButton = <button className=\"btn btn-danger\" disabled style={{backgroundColor:\"yellow\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>R</button>\r\n                    }else if(json.rows[i].requested !== 1 && json.rows[i].requested !== 2){\r\n                      rButton = <button className=\"btn btn-warning\" disabled style={{backgroundColor:\"white\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>R</button>\r\n                    }else if(json.rows[i].requested === 2){\r\n                      rButton = <button className=\"btn btn-success\" disabled style={{fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>R</button>\r\n                    }\r\n                    if(json.rows[i].verifydesign === 1 && json.rows[i].user !== \"None\"){\r\n                      row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> <button disabled className=\"btn btn-sm btn-warning\" style={{fontSize:\"12px\", padding:\"2px 5px 2px 5px\", marginRight:\"5px\"}}>PENDING</button> {pButton} {iButton} </div>}\r\n                    }else if(json.rows[i].verifydesign === 1 && json.rows[i].user === \"None\"){\r\n                      row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div> <button disabled className=\"btn btn-sm btn-warning\" style={{fontSize:\"12px\", padding:\"2px 5px 2px 5px\", marginRight:\"5px\"}}>PENDING</button> {pButton} {iButton} </div>}\r\n                    }else if(json.rows[i].claimed === 1){\r\n                      if(json.rows[i].issued === 1 && this.props.currentTab === \"Issued\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> <button className=\"btn btn-warning\"  disabled style={{fontSize:\"12px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> {pButton} {iButton} </div>}\r\n                      }else if (json.rows[i].issued !== 1 && this.props.currentTab === \"LDE/IsoControl\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> <button className=\"btn btn-warning\"  disabled style={{fontSize:\"12px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> {pButton} {iButton} </div>}\r\n                      }else if(this.props.currentTab === \"LDE/IsoControl\" && json.rows[i].issued === 1){\r\n                        row = null\r\n                      }else if(this.props.currentTab === \"Issued\" && json.rows[i].issued !== 1){\r\n                        row = null\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> <button className=\"btn btn-warning\"  disabled style={{fontSize:\"12px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> {pButton} {iButton} </div>}\r\n                        if(secureStorage.getItem(\"role\") === \"SpecialityLead\" && secureStorage.getItem(\"tab\") !== \"LDE/IsoControl\"){\r\n                          row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> <button className=\"btn btn-warning\"  disabled style={{fontSize:\"12px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> <button className=\"btn btn-danger\" style={{fontSize:\"12px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}} onClick={() => this.props.forceUnclaim(json.rows[i].filename)}>FORCE UNCLAIM</button> {pButton} {iButton} </div>}\r\n                        }\r\n                      }\r\n                    }else if(json.rows[i].user !== \"None\"){           \r\n                      if(json.rows[i].issued === 1 && this.props.currentTab === \"Issued\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> ,revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> {pButton} {iButton} {rButton} </div>}\r\n                      }else if (json.rows[i].issued !== 1 && this.props.currentTab === \"LDE/IsoControl\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> {pButton} {iButton} </div>}\r\n                      }else if(this.props.currentTab === \"LDE/IsoControl\" && json.rows[i].issued === 1){\r\n                        console.log(\"ASDSA\")\r\n                        row = null\r\n                      }else if(this.props.currentTab === \"Issued\" && json.rows[i].issued !== 1){\r\n                        row = null\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> {pButton} {iButton} </div>}\r\n                      }\r\n\r\n                    }else{                \r\n                      if(json.rows[i].issued === 1 && this.props.currentTab === \"Issued\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div> {pButton} {iButton} {rButton}</div>}\r\n                      }else if (json.rows[i].issued !== 1 && this.props.currentTab === \"LDE/IsoControl\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div> {pButton} {iButton} </div>}\r\n                      }else if(this.props.currentTab === \"LDE/IsoControl\" && json.rows[i].issued === 1){\r\n                        row = null\r\n                      }else if(this.props.currentTab === \"Issued\" && json.rows[i].issued !== 1){\r\n                        row = null\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div> {pButton} {iButton} </div>}\r\n                      }                   \r\n                    }\r\n                      if(row){\r\n                        rows.push(row)\r\n                      }\r\n                    }\r\n                  this.setState({\r\n                    data : rows,\r\n                  });\r\n                  console.log(this.state.data)\r\n              }\r\n          )\r\n          .catch(error => {\r\n              console.log(error);\r\n          })\r\n\r\n        \r\n  }\r\n\r\n  componentDidUpdate(prevProps, prevState){\r\n\r\n    if(prevProps !== this.props){\r\n      \r\n      let body \r\n      if(this.props.currentTab === \"Issued\"){\r\n        body ={\r\n          currentTab : \"LDE/IsoControl\"\r\n        }\r\n      }else{\r\n        body ={\r\n          currentTab : this.props.currentTab\r\n        }\r\n      }\r\n      const options = {\r\n        method: \"POST\",\r\n        headers: {\r\n            \"Content-Type\": \"application/json\"\r\n        },\r\n        body: JSON.stringify(body)\r\n    }\r\n      fetch(\"http://localhost:5000/files\", options)\r\n          .then(response => response.json())\r\n          .then(json => {\r\n                  var rows = []\r\n                  let row = null\r\n                  let pButton, iButton, rButton = null\r\n                  \r\n                  for(let i = 0; i < json.rows.length; i++){\r\n                    switch(json.rows[i].spo){\r\n                      case 0:\r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      case 1:\r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"yellow\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      case 2:\r\n                        pButton = <button className=\"btn btn-success\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break; \r\n                      case 3:\r\n                        pButton = <button className=\"btn btn-danger\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      case 4:\r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"orange\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>\r\n                        break;\r\n                      default:  \r\n                        pButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendProcessClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>P</button>      \r\n                    }\r\n                    switch(json.rows[i].sit){\r\n                      case 0:\r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      case 1:\r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"yellow\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      case 2:\r\n                        iButton = <button className=\"btn btn-success\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break; \r\n                      case 3:\r\n                        iButton = <button className=\"btn btn-danger\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      case 4:\r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"orange\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>\r\n                        break;\r\n                      default:  \r\n                        iButton = <button className=\"btn btn-warning\" onClick={() => this.props.sendInstrumentClick(json.rows[i].filename)} disabled style={{backgroundColor:\"white\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>I</button>      \r\n                    }\r\n                    \r\n                    let revision = \"\"\r\n                    if(this.props.currentTab === \"Issued\"){\r\n                      console.log(json.rows[i].transmittal)\r\n                      revision = \"R\" + String(json.rows[i].revision - 1) + \" - \" + json.rows[i].transmittal + \"/\" + json.rows[i].issued_date\r\n                    }else{\r\n                      revision = \"R\" + json.rows[i].revision + \"*\"\r\n                    }\r\n\r\n                    if(json.rows[i].requested === 1){\r\n                      rButton = <button className=\"btn btn-danger\" disabled style={{backgroundColor:\"yellow\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>R</button>\r\n                    }else if(json.rows[i].requested !== 1 && json.rows[i].requested !== 2){\r\n                      rButton = <button className=\"btn btn-warning\" disabled style={{backgroundColor:\"white\", fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>R</button>\r\n                    }else if(json.rows[i].requested === 2){\r\n                      rButton = <button className=\"btn btn-success\" disabled style={{fontSize:\"12px\", borderColor:\"black\", padding:\"2px 5px 2px 5px\", width:\"30px\", marginRight:\"5px\"}}>R</button>\r\n                    }\r\n                    if(json.rows[i].verifydesign === 1 && json.rows[i].user !== \"None\"){\r\n                      row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> <button disabled className=\"btn btn-sm btn-warning\" style={{fontSize:\"12px\", padding:\"2px 5px 2px 5px\", marginRight:\"5px\"}}>PENDING</button> {pButton} {iButton} </div>}\r\n                    }else if(json.rows[i].verifydesign === 1 && json.rows[i].user === \"None\"){\r\n                      row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div> <button disabled className=\"btn btn-sm btn-warning\" style={{fontSize:\"12px\", padding:\"2px 5px 2px 5px\", marginRight:\"5px\"}}>PENDING</button> {pButton} {iButton} </div>}\r\n                    }else if(json.rows[i].claimed === 1){\r\n                      if(json.rows[i].issued === 1 && this.props.currentTab === \"Issued\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> <button className=\"btn btn-warning\"  disabled style={{fontSize:\"12px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> {pButton} {iButton} </div>}\r\n                      }else if (json.rows[i].issued !== 1 && this.props.currentTab === \"LDE/IsoControl\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> <button className=\"btn btn-warning\"  disabled style={{fontSize:\"12px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> {pButton} {iButton} </div>}\r\n                      }else if(this.props.currentTab === \"LDE/IsoControl\" && json.rows[i].issued === 1){\r\n                        row = null\r\n                      }else if(this.props.currentTab === \"Issued\" && json.rows[i].issued !== 1){\r\n                        row = null\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> <button className=\"btn btn-warning\"  disabled style={{fontSize:\"12px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> {pButton} {iButton} </div>}\r\n                        if(secureStorage.getItem(\"role\") === \"SpecialityLead\" && secureStorage.getItem(\"tab\") !== \"LDE/IsoControl\"){\r\n                          row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> <button className=\"btn btn-warning\"  disabled style={{fontSize:\"12px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}}>CLAIMED</button> <button className=\"btn btn-danger\" style={{fontSize:\"12px\", padding:\"2px 5px 2px 5px\", marginRight: \"5px\"}} onClick={() => this.props.forceUnclaim(json.rows[i].filename)}>FORCE UNCLAIM</button> {pButton} {iButton} </div>}\r\n                        }\r\n                      }\r\n                    }else if(json.rows[i].user !== \"None\"){           \r\n                      if(json.rows[i].issued === 1 && this.props.currentTab === \"Issued\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> ,revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> {pButton} {iButton} {rButton} </div>}\r\n                      }else if (json.rows[i].issued !== 1 && this.props.currentTab === \"LDE/IsoControl\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> {pButton} {iButton} </div>}\r\n                      }else if(this.props.currentTab === \"LDE/IsoControl\" && json.rows[i].issued === 1){\r\n                        console.log(\"ASDSA\")\r\n                        row = null\r\n                      }else if(this.props.currentTab === \"Issued\" && json.rows[i].issued !== 1){\r\n                        row = null\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: this.state.acronyms[json.rows[i].role] + \" - \" + json.rows[i].user, actions: <div> {pButton} {iButton} </div>}\r\n                      }\r\n\r\n                    }else{                \r\n                      if(json.rows[i].issued === 1 && this.props.currentTab === \"Issued\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div> {pButton} {iButton} {rButton}</div>}\r\n                      }else if (json.rows[i].issued !== 1 && this.props.currentTab === \"LDE/IsoControl\"){\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div> {pButton} {iButton} </div>}\r\n                      }else if(this.props.currentTab === \"LDE/IsoControl\" && json.rows[i].issued === 1){\r\n                        row = null\r\n                      }else if(this.props.currentTab === \"Issued\" && json.rows[i].issued !== 1){\r\n                        row = null\r\n                      }else{\r\n                        row = {key:i, id: <Link onClick={() => this.getMaster(json.rows[i].filename)}>{json.rows[i].filename}</Link> , revision: revision, date: json.rows[i].updated_at.toString().substring(0,10) + \" \"+ json.rows[i].updated_at.toString().substring(11,19), from: json.rows[i].from, to: json.rows[i].to, user: json.rows[i].user, actions: <div> {pButton} {iButton} </div>}\r\n                      }                   \r\n                    }\r\n                      if(row){\r\n                        rows.push(row)\r\n                      }\r\n                    }\r\n                  this.setState({\r\n                    data : rows,\r\n                  });\r\n              }\r\n          )\r\n          .catch(error => {\r\n              console.log(error);\r\n          })\r\n      }\r\n\r\n  }\r\n\r\n  getMaster(fileName){\r\n    const options = {\r\n      method: \"GET\",\r\n      headers: {\r\n          \"Content-Type\": \"application/pdf\"\r\n      }\r\n    }\r\n    fetch(\"http://localhost:5000/getMaster/\"+fileName, options)\r\n    .then(res => res.blob())\r\n    .then(response => {\r\n      console.log(response)\r\n      const file = new Blob([response], {\r\n        type: \"application/pdf\"\r\n      });\r\n      //Build a URL from the file\r\n      const fileURL = URL.createObjectURL(file);\r\n      //Open the URL on new Window\r\n      window.open(fileURL);\r\n    })\r\n    .catch(error => {\r\n      console.log(error);\r\n    });\r\n  }\r\n\r\n  \r\n  getColumnSearchProps = dataIndex => ({\r\n    filterDropdown: ({ setSelectedKeys, selectedKeys, confirm, clearFilters }) => (\r\n      <div style={{ padding: 8 }}>\r\n        <Input\r\n          ref={node => {\r\n            this.searchInput = node;\r\n          }}\r\n          placeholder={`Search ${dataIndex}`}\r\n          value={selectedKeys[0]}\r\n          onChange={e => setSelectedKeys(e.target.value ? [e.target.value] : [])}\r\n          onPressEnter={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n          style={{ width: 188, marginBottom: 8, display: 'block' }}\r\n        />\r\n        <Space>\r\n          <Button\r\n            type=\"primary\"\r\n            onClick={() => this.handleSearch(selectedKeys, confirm, dataIndex)}\r\n            icon={<SearchOutlined />}\r\n            size=\"small\"\r\n            style={{ width: 90 }}\r\n          >\r\n            Search\r\n          </Button>\r\n          <Button onClick={() => this.handleReset(clearFilters)} size=\"small\" style={{ width: 90 }}>\r\n            Reset\r\n          </Button>\r\n          <Button\r\n            type=\"link\"\r\n            size=\"small\"\r\n            onClick={() => {\r\n              confirm({ closeDropdown: false });\r\n              this.setState({\r\n                searchText: selectedKeys[0],\r\n                searchedColumn: dataIndex,\r\n              });\r\n            }}\r\n          >\r\n            Filter\r\n          </Button>\r\n        </Space>\r\n      </div>\r\n    ),\r\n    filterIcon: filtered => <SearchOutlined style={{ color: filtered ? '#1890ff' : undefined }} />,\r\n    onFilter: (value, record) =>\r\n\r\n    this.state.searchedColumn === \"id\" ? (\r\n      record.id.props.children\r\n        ? record.id.props.children.toString().toLowerCase().includes(value.toLowerCase())\r\n        : ''\r\n      ) : (\r\n        record[dataIndex]\r\n          ? record[dataIndex].toString().toLowerCase().includes(value.toLowerCase())\r\n          : ''\r\n      ),\r\n\r\n    onFilterDropdownVisibleChange: visible => {\r\n      if (visible) {\r\n        setTimeout(() => this.searchInput.select(), 100);\r\n      }\r\n    },\r\n    render: text => \r\n    text.props && text.type !== \"div\" ? (\r\n      <Link onClick={() => this.getMaster(text.props.children)}>{text.props.children}</Link>\r\n    ) : this.state.searchedColumn === dataIndex ? (\r\n      <Highlighter\r\n        highlightStyle={{ backgroundColor: '#ffc069', padding: 0 }}\r\n        searchWords={[this.state.searchText]}\r\n        autoEscape\r\n        textToHighlight={text ? text : ''}\r\n      />\r\n    ) : (\r\n      text\r\n    ),\r\n      \r\n  });\r\n\r\n  handleSearch = (selectedKeys, confirm, dataIndex) => {\r\n    confirm();\r\n    this.setState({\r\n      searchText: selectedKeys[0],\r\n      searchedColumn: dataIndex,\r\n    });\r\n  };\r\n\r\n  handleReset = clearFilters => {\r\n    clearFilters();\r\n    this.setState({ searchText: '' });\r\n  };\r\n\r\n  onSelectChange = (selectedRowKeys, selectedRows) => {\r\n    let ids = []\r\n    for(let i = 0; i < selectedRows.length; i++){\r\n      ids.push(selectedRows[i].id.props.children)\r\n    }\r\n    this.setState({\r\n      selectedRowsKeys: selectedRowKeys,\r\n      selectedRows: selectedRows\r\n    })\r\n    //this.setState({ selectedRows: selectedRows });\r\n    this.props.onChange(ids);\r\n    \r\n  };\r\n  \r\n\r\n  render() {\r\n    const selectedRows = this.state.selectedRows;\r\n    const selectedRowsKeys = this.state.selectedRowsKeys;\r\n    const rowSelection = {\r\n      onChange: (selectedRowKeys, selectedRows) => {\r\n        this.onSelectChange(selectedRowKeys, selectedRows);\r\n      },\r\n      getCheckboxProps: (record) => record.actions.props.children[5] ?(\r\n        {\r\n        \r\n        disabled: record.actions.props.children[1].props.children === 'CLAIMED'| (record.actions.props.children[1].props.children === 'PENDING' && (secureStorage.getItem(\"role\") !== \"DesignLead\" && secureStorage.getItem(\"role\") !== \"StressLead\" && secureStorage.getItem(\"role\") !== \"SupportsLead\" && secureStorage.getItem(\"role\") !== \"SpecialityLead\")) | (record.actions.props.children[1].props.children !== 'PENDING' && this.props.currentTab !== \"Issued\" && (secureStorage.getItem(\"role\") === \"DesignLead\" | secureStorage.getItem(\"role\") === \"StressLead\" | secureStorage.getItem(\"role\") === \"SupportsLead\") || record.actions.props.children[5].props.className === \"btn btn-success\"),\r\n        // Column configuration not to be checked\r\n        name: record.name,\r\n      }) : ({\r\n        disabled: record.actions.props.children[1].props.children === 'CLAIMED'| (record.actions.props.children[1].props.children === 'PENDING' && (secureStorage.getItem(\"role\") !== \"DesignLead\" && secureStorage.getItem(\"role\") !== \"StressLead\" && secureStorage.getItem(\"role\") !== \"SupportsLead\" && secureStorage.getItem(\"role\") !== \"SpecialityLead\")) | (record.actions.props.children[1].props.children !== 'PENDING' && (secureStorage.getItem(\"role\") === \"DesignLead\" | secureStorage.getItem(\"role\") === \"StressLead\" | secureStorage.getItem(\"role\") === \"SupportsLead\")),\r\n        // Column configuration not to be checked\r\n        name: record.name,\r\n      }),\r\n    };\r\n    if(localStorage.getItem(\"update\") === \"true\"){\r\n      this.setState({\r\n        selectedRows: [],\r\n        selectedRowsKeys: []\r\n      })\r\n      rowSelection.selectedRowKeys = []\r\n      rowSelection.selectedRows = []\r\n      localStorage.setItem(\"update\", false)\r\n    }else{\r\n      rowSelection.selectedRowKeys = selectedRowsKeys \r\n      rowSelection.selectedRows = selectedRows;\r\n    }  \r\n    \r\n    \r\n    const columns = [\r\n      {\r\n        title: <center className=\"dataTable__header__text\">ISO ID</center>,\r\n        dataIndex: 'id',\r\n        key: 'id',\r\n        width: '20%',\r\n        ...this.getColumnSearchProps('id'),\r\n        sorter:{\r\n          compare: (a, b) => a.id.props.children.localeCompare(b.id.props.children),\r\n        },\r\n      },\r\n      {\r\n        title: <center className=\"dataTable__header__text\">Revision</center>,\r\n        dataIndex: 'revision',\r\n        key: 'revision',\r\n        width: '15%',\r\n        ...this.getColumnSearchProps('revision'),\r\n        sorter:{\r\n          compare: (a, b) => a.id.props.children.localeCompare(b.id.props.children),\r\n        },\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">Date</div>,\r\n        dataIndex: 'date',\r\n        key: 'date',\r\n        width: '20%',\r\n        ...this.getColumnSearchProps('date'),\r\n        sorter: {\r\n          compare: (a, b) => a.date.replace(/\\D/g,'') - b.date.replace(/\\D/g,''),\r\n        },\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">From</div>,\r\n        dataIndex: 'from',\r\n        key: 'from',\r\n        ...this.getColumnSearchProps('from'),\r\n        sorter: {\r\n          compare: (a, b) => { return a.from.localeCompare(b.from)},\r\n        },\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">To</div>,\r\n        dataIndex: 'to',\r\n        key: 'to',\r\n        ...this.getColumnSearchProps('to'),\r\n        sorter: {\r\n          compare: (a, b) => { return a.to.localeCompare(b.to)},\r\n        },\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">User</div>,\r\n        dataIndex: 'user',\r\n        key: 'user',\r\n        ...this.getColumnSearchProps('user'),\r\n        sorter: {\r\n          compare: (a, b) => { return a.user.localeCompare(b.user)},\r\n        },\r\n      },\r\n      {\r\n        title: <div className=\"dataTable__header__text\">Actions</div>,\r\n        dataIndex: 'actions',\r\n        key: 'actions',\r\n        ...this.getColumnSearchProps('actions'),\r\n        sorter: {\r\n          compare: (a, b) => a.actions.localeCompare(b.actions),\r\n        },\r\n      },\r\n    ];\r\n\r\n    var totalElements = null;\r\n    if (this.state.data.length === 0){\r\n      totalElements = null;\r\n    }else{\r\n      totalElements = (<div style={{position: \"absolute\", bottom: 25, left:0}}>\r\n      <b>Total elements: {this.state.data.length}</b>\r\n     </div>);\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {this.state.updateData}\r\n        <div className=\"dataTable__container\">\r\n        <Table className=\"customTable\" bordered = {true} rowSelection={{type: 'checkbox', ...rowSelection}} columns={columns} dataSource={this.state.data} pagination={{ pageSize: this.props.pagination  }} size=\"small\"/>\r\n          {totalElements}\r\n        </div>\r\n        \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DataTable;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\stateTable\\stateTable.js",["191"],"//Tabla de estado de IsoTracker\r\n\r\nimport \"./stateTable.css\"\r\nimport React, { useState , useEffect} from 'react'\r\n\r\nconst StateTable = props =>{\r\n\r\n    const [designR0, setDesignR0] = useState(0)\r\n    const [designR1, setDesignR1] = useState(0)\r\n    const [designR2, setDesignR2] = useState(0)\r\n    const [designHold, setDesignHold] = useState(0)\r\n    const [designDeleted, setDesignDeleted] = useState(0)\r\n    const [designStock, setDesignStock] = useState(0)\r\n    const [stressR0, setStressR0] = useState(0)\r\n    const [stressR1, setStressR1] = useState(0)\r\n    const [stressR2, setStressR2] = useState(0)\r\n    const [stressHold, setStressHold] = useState(0)\r\n    const [stressDeleted, setStressDeleted] = useState(0)\r\n    const [stressStock, setStressStock] = useState(0)\r\n    const [supportsR0, setSupportsR0] = useState(0)\r\n    const [supportsR1, setSupportsR1] = useState(0)\r\n    const [supportsR2, setSupportsR2] = useState(0)\r\n    const [supportsHold, setSupportsHold] = useState(0)\r\n    const [supportsDeleted, setSupportsDeleted] = useState(0)\r\n    const [supportsStock, setSupportsStock] = useState(0)\r\n    const [materialsR0, setMaterialsR0] = useState(0)\r\n    const [materialsR1, setMaterialsR1] = useState(0)\r\n    const [materialsR2, setMaterialsR2] = useState(0)\r\n    const [materialsHold, setMaterialsHold] = useState(0)\r\n    const [materialsDeleted, setMaterialsDeleted] = useState(0)\r\n    const [materialsStock, setMaterialsStock] = useState(0)\r\n    const [issuerR0, setIssuerR0] = useState(0)\r\n    const [issuerR1, setIssuerR1] = useState(0)\r\n    const [issuerR2, setIssuerR2] = useState(0)\r\n    const [issuerHold, setIssuerHold] = useState(0)\r\n    const [issuerDeleted, setIssuerDeleted] = useState(0)\r\n    const [issuerStock, setIssuerStock] = useState(0)\r\n    const [toIssueR0, setToIssueR0] = useState(0)\r\n    const [toIssueR1, setToIssueR1] = useState(0)\r\n    const [toIssueR2, setToIssueR2] = useState(0)\r\n    const [toIssueHold, setToIssueHold] = useState(0)\r\n    const [toIssueDeleted, setToIssueDeleted] = useState(0)\r\n    const [toIssueStock, setToIssueStock] = useState(0)\r\n    const [issuedR0, setIssuedR0] = useState(0)\r\n    const [issuedR1, setIssuedR1] = useState(0)\r\n    const [issuedR2, setIssuedR2] = useState(0)\r\n    const [issuedDeleted, setIssuedDeleted] = useState(0)\r\n    const [issuedStock, setIssuedStock] = useState(0)\r\n    const [totalR0, setTotalR0] = useState(0)\r\n    const [totalR1, setTotalR1] = useState(0)\r\n    const [totalR2, setTotalR2] = useState(0)\r\n    const [totalHold, setTotalHold] = useState(0)\r\n    const [totalDeleted, setTotalDeleted] = useState(0)\r\n    const [totalStock, setTotalStock] = useState(0)\r\n    const [model, setModel] = useState(0)\r\n\r\n    const [progress, setProgress] = useState(0)\r\n    const [progressIso, setProgressIso] = useState(0)\r\n    const [realProgress, setRealProgress] = useState(0)\r\n    const [realProgressISO, setRealProgressIso] = useState(0)\r\n\r\n    const [realProgressTD, setRealProgressTD] = useState()\r\n    const [realProgressIsoTD, setRealProgressIsoTD] = useState()\r\n    const [realProgressTDValue, setRealProgressTDValue] = useState()\r\n    const [realProgressIsoTDValue, setRealProgressIsoTDValue] = useState()\r\n\r\n    useEffect(()=>{\r\n        if(process.env.REACT_APP_PROGRESS === \"0\"){\r\n            fetch(\"http://localhost:5000/updateStatus\")\r\n            .then(response => response.json())\r\n            .then(json => {\r\n                setDesignR0(json[\"designR0\"])\r\n                setDesignR1(json[\"designR1\"])\r\n                setDesignR2(json[\"designR2\"])\r\n                setDesignHold(json[\"designHold\"])\r\n                setDesignDeleted(json[\"designDeleted\"])\r\n                setDesignStock(json[\"designStock\"])\r\n                setStressR0(json[\"stressR0\"])\r\n                setStressR1(json[\"stressR1\"])\r\n                setStressR2(json[\"stressR2\"])\r\n                setStressHold(json[\"stressHold\"])\r\n                setStressDeleted(json[\"stressDeleted\"])\r\n                setStressStock(json[\"stressStock\"])\r\n                setSupportsR0(json[\"supportsR0\"])\r\n                setSupportsR1(json[\"supportsR1\"])\r\n                setSupportsR2(json[\"supportsR2\"])\r\n                setSupportsHold(json[\"supportsHold\"])\r\n                setSupportsDeleted(json[\"supportsDeleted\"])\r\n                setSupportsStock(json[\"supportsStock\"])\r\n                setMaterialsR0(json[\"materialsR0\"])\r\n                setMaterialsR1(json[\"materialsR1\"])\r\n                setMaterialsR2(json[\"materialsR2\"])\r\n                setMaterialsHold(json[\"materialsHold\"])\r\n                setMaterialsDeleted(json[\"materialsDeleted\"])\r\n                setMaterialsStock(json[\"materialsStock\"])\r\n                setIssuerR0(json[\"issuerR0\"])\r\n                setIssuerR1(json[\"issuerR1\"])\r\n                setIssuerR2(json[\"issuerR2\"])\r\n                setIssuerHold(json[\"issuerHold\"])\r\n                setIssuerDeleted(json[\"issuerDeleted\"])\r\n                setIssuerStock(json[\"issuerStock\"])\r\n                setToIssueR0(json[\"toIssueR0\"])\r\n                setToIssueR1(json[\"toIssueR1\"])\r\n                setToIssueR2(json[\"toIssueR2\"])\r\n                setToIssueHold(json[\"toIssueHold\"])\r\n                setToIssueDeleted(json[\"toIssueDeleted\"])\r\n                setToIssueStock(json[\"toIssueStock\"])\r\n                setIssuedR0(json[\"issuedR0\"])\r\n                setIssuedR1(json[\"issuedR1\"])\r\n                setIssuedR2(json[\"issuedR2\"])\r\n                setIssuedDeleted(json[\"issuedDeleted\"])\r\n                setIssuedStock(json[\"issuedStock\"])\r\n                setTotalR0(json[\"totalR0\"])\r\n                setTotalR1(json[\"totalR1\"])\r\n                setTotalR2(json[\"totalR2\"])\r\n                setTotalHold(json[\"totalHold\"])\r\n                setTotalDeleted(json[\"totalDeleted\"])\r\n                setTotalStock(json[\"totalStock\"])\r\n                \r\n            }) \r\n        }else{\r\n            fetch(\"http://localhost:5000/updateStatus\")\r\n                .then(response => response.json())\r\n                .then(json => {\r\n                    console.log(json[\"model\"])\r\n                    setDesignR0(json[\"designR0\"])\r\n                setDesignR1(json[\"designR1\"])\r\n                setDesignR2(json[\"designR2\"])\r\n                setDesignHold(json[\"designHold\"])\r\n                setDesignDeleted(json[\"designDeleted\"])\r\n                setDesignStock(json[\"designStock\"])\r\n                setStressR0(json[\"stressR0\"])\r\n                setStressR1(json[\"stressR1\"])\r\n                setStressR2(json[\"stressR2\"])\r\n                setStressHold(json[\"stressHold\"])\r\n                setStressDeleted(json[\"stressDeleted\"])\r\n                setStressStock(json[\"stressStock\"])\r\n                setSupportsR0(json[\"supportsR0\"])\r\n                setSupportsR1(json[\"supportsR1\"])\r\n                setSupportsR2(json[\"supportsR2\"])\r\n                setSupportsHold(json[\"supportsHold\"])\r\n                setSupportsDeleted(json[\"supportsDeleted\"])\r\n                setSupportsStock(json[\"supportsStock\"])\r\n                setMaterialsR0(json[\"materialsR0\"])\r\n                setMaterialsR1(json[\"materialsR1\"])\r\n                setMaterialsR2(json[\"materialsR2\"])\r\n                setMaterialsHold(json[\"materialsHold\"])\r\n                setMaterialsDeleted(json[\"materialsDeleted\"])\r\n                setMaterialsStock(json[\"materialsStock\"])\r\n                setIssuerR0(json[\"issuerR0\"])\r\n                setIssuerR1(json[\"issuerR1\"])\r\n                setIssuerR2(json[\"issuerR2\"])\r\n                setIssuerHold(json[\"issuerHold\"])\r\n                setIssuerDeleted(json[\"issuerDeleted\"])\r\n                setIssuerStock(json[\"issuerStock\"])\r\n                setToIssueR0(json[\"toIssueR0\"])\r\n                setToIssueR1(json[\"toIssueR1\"])\r\n                setToIssueR2(json[\"toIssueR2\"])\r\n                setToIssueHold(json[\"toIssueHold\"])\r\n                setToIssueDeleted(json[\"toIssueDeleted\"])\r\n                setToIssueStock(json[\"toIssueStock\"])\r\n                setIssuedR0(json[\"issuedR0\"])\r\n                setIssuedR1(json[\"issuedR1\"])\r\n                setIssuedR2(json[\"issuedR2\"])\r\n                setIssuedDeleted(json[\"issuedDeleted\"])\r\n                setIssuedStock(json[\"issuedStock\"])\r\n                setTotalR0(json[\"totalR0\"])\r\n                setTotalR1(json[\"totalR1\"])\r\n                setTotalR2(json[\"totalR2\"])\r\n                setTotalHold(json[\"totalHold\"])\r\n                setTotalDeleted(json[\"totalDeleted\"])\r\n                setTotalStock(json[\"totalStock\"])\r\n                setModel(json[\"modelCount\"])\r\n                }) \r\n                const options = {\r\n                    method: \"GET\",\r\n                }\r\n                fetch(\"http://localhost:5000/currentProgressISO\", options)\r\n                .then(response => response.json())\r\n                .then(async json =>{\r\n                     setProgressIso(json.progressISO)\r\n                     setRealProgressIso(json.realprogressISO)\r\n                })\r\n                \r\n                fetch(\"http://localhost:5000/currentProgress\", options)\r\n                .then(response => response.json())\r\n                .then(async json =>{\r\n                     setProgress(json.progress)\r\n                     setRealProgress(json.realprogress)\r\n                })\r\n\r\n        }\r\n        console.log(props.currentRole)\r\n        if(props.currentRole === \"SpecialityLead\"){\r\n            setRealProgressTD(<td  className=\"statusTable__header\" style={{backgroundColor:\"orange\"}}>R.P.</td>)\r\n            setRealProgressIsoTD(<td  className=\"statusTable__header\" style={{backgroundColor:\"orange\"}}>R.P. ISO</td>)\r\n            setRealProgressTDValue(<td rowSpan=\"6\" className=\"statusTable__state\">{realProgress}%</td>)\r\n            setRealProgressIsoTDValue(<td rowSpan=\"6\" className=\"statusTable__state\">{realProgressISO}%</td>)\r\n        }else{\r\n            setRealProgressTD(null)\r\n            setRealProgressIsoTD(null)\r\n            setRealProgressTDValue(null)\r\n            setRealProgressIsoTDValue(null)\r\n        }\r\n        \r\n    },[props.updateData, props.currentRole])\r\n\r\n    return (\r\n        <td className=\"statusTable__td\">\r\n            <table className=\"statusTable__table\">\r\n                <tbody className=\"statusTable__body\">\r\n                    <tr>\r\n                        <td  className=\"statusTable__header\" >M:{model}</td>\r\n                        <td  className=\"statusTable__header\" >Design</td>\r\n                        <td  className=\"statusTable__header\" >Stress</td>\r\n                        <td  className=\"statusTable__header\" >Supports</td>\r\n                        <td  className=\"statusTable__header\" >Materials</td>\r\n                        <td  className=\"statusTable__header\" >Issuer</td>\r\n                        <td  className=\"statusTable__header\" >To issue</td>\r\n                        <td  className=\"statusTable__header\" style={{backgroundColor:\"#00a000\"}}>Issued</td>\r\n                        <td  className=\"statusTable__header\" style={{backgroundColor:\"blue\"}}>Total</td>\r\n                        <td  className=\"statusTable__header\" style={{backgroundColor:\"orange\"}}>P.</td>\r\n                        <td  className=\"statusTable__header\" style={{backgroundColor:\"orange\"}}>P.ISO</td>\r\n                        {realProgressTD}\r\n                        {realProgressIsoTD}\r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"statusTable__header\" style={{backgroundColor:\"lightblue\"}}>R0</td>\r\n                        <td className=\"statusTable__state\">{designR0}</td>\r\n                        <td className=\"statusTable__state\">{stressR0}</td>\r\n                        <td className=\"statusTable__state\">{supportsR0}</td>\r\n                        <td className=\"statusTable__state\">{materialsR0}</td>\r\n                        <td className=\"statusTable__state\">{issuerR0}</td>\r\n                        <td className=\"statusTable__state\">{toIssueR0}</td>\r\n                        <td className=\"statusTable__state\">{issuedR0}</td>   \r\n                        <td className=\"statusTable__state\">{totalR0}</td>  \r\n                        <td rowSpan=\"6\" className=\"statusTable__state\">{progress}%</td>  \r\n                        <td rowSpan=\"6\" className=\"statusTable__state\">{progressIso}%</td>  \r\n                        {realProgressTDValue}\r\n                        {realProgressIsoTDValue} \r\n                    </tr>\r\n                    <tr>\r\n                        <td className=\"statusTable__header\" style={{backgroundColor:\"lightblue\"}}>R1</td>\r\n                        <td className=\"statusTable__state\">{designR1}</td>\r\n                        <td className=\"statusTable__state\">{stressR1}</td>\r\n                        <td className=\"statusTable__state\">{supportsR1}</td>\r\n                        <td className=\"statusTable__state\">{materialsR1}</td>\r\n                        <td className=\"statusTable__state\">{issuerR1}</td>\r\n                        <td className=\"statusTable__state\">{toIssueR1}</td>\r\n                        <td className=\"statusTable__state\">{issuedR1}</td>   \r\n                        <td className=\"statusTable__state\">{totalR1}</td> \r\n                  </tr>\r\n                  <tr>\r\n                        <td className=\"statusTable__header\" style={{backgroundColor:\"lightblue\"}}>R2</td>\r\n                        <td className=\"statusTable__state\">{designR2}</td>\r\n                        <td className=\"statusTable__state\">{stressR2}</td>\r\n                        <td className=\"statusTable__state\">{supportsR2}</td>\r\n                        <td className=\"statusTable__state\">{materialsR2}</td>\r\n                        <td className=\"statusTable__state\">{issuerR2}</td>\r\n                        <td className=\"statusTable__state\">{toIssueR2}</td>\r\n                        <td className=\"statusTable__state\">{issuedR2}</td>   \r\n                        <td className=\"statusTable__state\">{totalR2}</td> \r\n                  </tr>\r\n                  <tr>\r\n                        <td className=\"statusTable__header\" style={{backgroundColor:\"red\"}}>On hold</td>\r\n                        <td className=\"statusTable__state\">{designHold}</td>\r\n                        <td className=\"statusTable__state\">{stressHold}</td>\r\n                        <td className=\"statusTable__state\">{supportsHold}</td>\r\n                        <td className=\"statusTable__state\">{materialsHold}</td>\r\n                        <td className=\"statusTable__state\">{issuerHold}</td>\r\n                        <td className=\"statusTable__state\">{toIssueHold}</td>\r\n                        <td className=\"statusTable__state\">-</td>   \r\n                        <td className=\"statusTable__state\">{totalHold}</td> \r\n                  </tr>\r\n                  <tr>\r\n                        <td className=\"statusTable__header\" style={{backgroundColor:\"grey\"}}>Deleted</td>\r\n                        <td className=\"statusTable__state\">{designDeleted}</td>\r\n                        <td className=\"statusTable__state\">{stressDeleted}</td>\r\n                        <td className=\"statusTable__state\">{supportsDeleted}</td>\r\n                        <td className=\"statusTable__state\">{materialsDeleted}</td>\r\n                        <td className=\"statusTable__state\">{issuerDeleted}</td>\r\n                        <td className=\"statusTable__state\">{toIssueDeleted}</td>\r\n                        <td className=\"statusTable__state\">{issuedDeleted}</td>   \r\n                        <td className=\"statusTable__state\">{totalDeleted}</td> \r\n                  </tr>\r\n                  <tr>\r\n                        <td className=\"statusTable__header\" style={{backgroundColor:\"blue\"}}>Stock</td>\r\n                        <td className=\"statusTable__state\">{designStock}</td>\r\n                        <td className=\"statusTable__state\">{stressStock}</td>\r\n                        <td className=\"statusTable__state\">{supportsStock}</td>\r\n                        <td className=\"statusTable__state\">{materialsStock}</td>\r\n                        <td className=\"statusTable__state\">{issuerStock}</td>\r\n                        <td className=\"statusTable__state\">{toIssueStock}</td>\r\n                        <td className=\"statusTable__state\">{issuedStock}</td>   \r\n                        <td className=\"statusTable__state\">{totalStock}</td> \r\n                  </tr>\r\n                </tbody>\r\n            </table>\r\n        </td>\r\n    );\r\n};\r\n\r\nexport default StateTable;","C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\commentBox\\commentBox.js",[],["192","193"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\actionExtra\\actionExtra.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\actionBtns\\actionBtns.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\selectPag\\selectPag.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\progressTable\\progressTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\checkInTable\\checkInTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navBar\\navBar.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\myTrayTable\\myTrayTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\myTrayBtn\\myTrayBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\binTable\\binTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\navBtns\\navBtns.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\statusDataTable\\statusDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\menuList\\menuList.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\binBtn\\binBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\cancelIso\\cancelIso.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadPopUp\\uploadPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\chooseFile\\chooseFile.js",[],["194","195"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\dragAndDrop\\dragAndDrop.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\pages\\loginPage\\loginPage.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\login\\login.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\roleDropDown\\roleDropDown.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\onHoldTable\\onHoldTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\onHoldBtn\\onHoldBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\historyDataTable\\historyDataTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\procInsBtn\\procInsBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\procInstTable\\procInstTable.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadProcInst\\uploadProcInst.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportsBtn\\reportsBtn.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\reportBoxBtns\\reportBoxBtns.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\forceClaimPopUp\\forceClaimPopUp.js",[],["196","197"],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\uploadReportPopUp\\uploadReportPopUp.js",[],"C:\\xampp\\htdocs\\isotracker-dev\\isotracker-react\\src\\components\\issuedBtn\\issuedBtn.js",[],{"ruleId":"198","replacedBy":"199"},{"ruleId":"200","replacedBy":"201"},{"ruleId":"202","severity":1,"message":"203","line":52,"column":22,"nodeType":"204","messageId":"205","endLine":52,"endColumn":33},{"ruleId":"202","severity":1,"message":"206","line":53,"column":26,"nodeType":"204","messageId":"205","endLine":53,"endColumn":41},{"ruleId":"202","severity":1,"message":"207","line":54,"column":25,"nodeType":"204","messageId":"205","endLine":54,"endColumn":39},{"ruleId":"202","severity":1,"message":"208","line":55,"column":29,"nodeType":"204","messageId":"205","endLine":55,"endColumn":47},{"ruleId":"209","severity":1,"message":"210","line":144,"column":7,"nodeType":"211","endLine":144,"endColumn":20,"suggestions":"212"},{"ruleId":"213","severity":1,"message":"214","line":1046,"column":67,"nodeType":"215","messageId":"216","endLine":1046,"endColumn":69},{"ruleId":"213","severity":1,"message":"214","line":1047,"column":64,"nodeType":"215","messageId":"216","endLine":1047,"endColumn":66},{"ruleId":"198","replacedBy":"217"},{"ruleId":"200","replacedBy":"218"},{"ruleId":"213","severity":1,"message":"219","line":494,"column":457,"nodeType":"215","messageId":"216","endLine":494,"endColumn":459},{"ruleId":"213","severity":1,"message":"219","line":494,"column":609,"nodeType":"215","messageId":"216","endLine":494,"endColumn":611},{"ruleId":"209","severity":1,"message":"220","line":206,"column":7,"nodeType":"211","endLine":206,"endColumn":44,"suggestions":"221"},{"ruleId":"198","replacedBy":"222"},{"ruleId":"200","replacedBy":"223"},{"ruleId":"198","replacedBy":"224"},{"ruleId":"200","replacedBy":"225"},{"ruleId":"198","replacedBy":"226"},{"ruleId":"200","replacedBy":"227"},"no-native-reassign",["228"],"no-negated-in-lhs",["229"],"no-unused-vars","'setProgress' is assigned a value but never used.","Identifier","unusedVar","'setRealProgress' is assigned a value but never used.","'setProgressISO' is assigned a value but never used.","'setRealProgressISO' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'body', 'secureStorage', and 'updateData'. Either include them or remove the dependency array. You can also do a functional update 'setUpdateData(u => ...)' if you only need 'updateData' in the 'setUpdateData' call.","ArrayExpression",["230"],"no-mixed-operators","Unexpected mix of '||' and '&&'.","LogicalExpression","unexpectedMixedOperator",["228"],["229"],"Unexpected mix of '&&' and '||'.","React Hook useEffect has missing dependencies: 'realProgress' and 'realProgressISO'. Either include them or remove the dependency array. You can also replace multiple useState variables with useReducer if 'setRealProgressTDValue' needs the current value of 'realProgress'.",["231"],["228"],["229"],["228"],["229"],["228"],["229"],"no-global-assign","no-unsafe-negation",{"desc":"232","fix":"233"},{"desc":"234","fix":"235"},"Update the dependencies array to be: [body, currentRole, secureStorage, updateData]",{"range":"236","text":"237"},"Update the dependencies array to be: [props.updateData, props.currentRole, realProgress, realProgressISO]",{"range":"238","text":"239"},[6284,6297],"[body, currentRole, secureStorage, updateData]",[10047,10084],"[props.updateData, props.currentRole, realProgress, realProgressISO]"]